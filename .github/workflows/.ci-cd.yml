name: CI-CD pipeline

on:
  push:
    branches:
      - main
      - stage
  pull_request:
    branches:
      - main

jobs:
  # build-and-test:
  #   name: Build & Unit Tests
  #   runs-on: ubuntu-latest

  #   steps:
  #     # 1️⃣ Checkout repository
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     # 2️⃣ Cache Bun runtime
  #     - name: Cache Bun
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.bun
  #         key: bun-${{ runner.os }}-${{ hashFiles('bun.lock') }}

  #     # 3️⃣ Install Bun
  #     - name: Install Bun
  #       run: |
  #         curl -fsSL https://bun.sh/install | BUN_INSTALL_VERSION=1.9.0 bash
  #         echo "$HOME/.bun/bin" >> $GITHUB_PATH

  #     # 4️⃣ Install dependencies
  #     - name: Install dependencies
  #       run: bun install
  #     - name: Reinstall @prisma/client
  #       run: bun add @prisma/client

  #     # 5️⃣ Build the app
  #     - name: Build app
  #       run: bun run build

  #     # 6️⃣ Check code format
  #     - name: Check code format
  #       run: npx prettier --check src/**/*.ts

  #     # 7️⃣ Lint
  #     - name: Run ESLint
  #       run: bun run lint

  #     # 8️⃣ Generate Prisma client
  #     - name: Generate Prisma client
  #       run: bunx prisma generate

  #     # 9️⃣ Run unit tests
  #     - name: Run unit tests
  #       run: bun run test:unit

  # integration-tests:
  #   name: Run Integration Tests in Docker
  #   runs-on: ubuntu-latest
  #   needs: build-and-test

  #   steps:
  #     # 1️⃣ Checkout the repository
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     # 2️⃣ Create .env from the secret
  #     - name: Create .env
  #       run: printf "%s\n" "${{ secrets.ENV }}" > .env

  #     # 3️⃣ Start containers, wait for DB, apply migrations & seed and prepare node enviroment for Vitest
  #     - name: Set up Stage Docker Compose
  #       env:
  #         DATABASE_URL: postgresql://dart:nghk98734@db:5432/postgresdb
  #         POSTGRES_USER: dart
  #         POSTGRES_PASSWORD: nghk98734
  #         POSTGRES_DB: postgresdb
  #         PORT: 3000
  #       run: docker compose --profile stage up --build -d

  #     - name: Wait for PostgreSQL
  #       run: |
  #         ATTEMPTS=0
  #         MAX_ATTEMPTS=15
  #         until docker compose exec -T db pg_isready -U dart > /dev/null 2>&1; do
  #           echo "Waiting for database..."
  #           sleep 2
  #           ATTEMPTS=$((ATTEMPTS+1))
  #           if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
  #             echo "Database did not become ready in time."
  #             exit 1
  #           fi
  #         done

  #     # 4️⃣ Run tests (coverage)
  #     - name: Run tests (unit & integration)
  #       run: docker compose run --rm app4-stage bun run test:coverage

  #     # # 5️⃣ Copiar pasta de coverage do container para o host
  #     # - name: Copy coverage folder
  #     #   run: docker cp $(docker compose ps -q app4):/usr/src/app/coverage ./coverage

  #     # # 6️⃣ Instalar sonar-scanner e dependências
  #     # - name: Set up SonarQube scanner
  #     #   uses: sonarsource/sonarcloud-github-action@v2
  #     #   with:
  #     #     args: >
  #     #       -Dsonar.organization=devdartjs
  #     #       -Dsonar.projectKey=Virtus-backend
  #     #       -Dsonar.host.url=https://sonarcloud.io
  #     #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}
  #     #       -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  #     # 7️⃣ Tear down Docker containers
  #     - name: Tear down containers
  #       if: always()
  #       run: docker compose down --volumes --remove-orphans

  #     # 8️⃣ Clean up the .env file
  #     - name: Cleanup .env
  #       run: rm -f .env

  build-and-push-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    # needs: integration-tests

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Cache Bun runtime
      - name: Cache Bun
        uses: actions/cache@v3
        with:
          path: ~/.bun
          key: bun-${{ runner.os }}-${{ hashFiles('bun.lock') }}

      # 3️⃣ Install Bun
      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | BUN_INSTALL_VERSION=1.9.0 bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      # 4️⃣ Login to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 1️⃣ Create .env from the secret
      - name: Create .env
        run: printf "%s\n" "${{ secrets.ENV_STAGE }}" > .env

      # 5️⃣ Build Docker image
      - name: Build Docker image
        run: docker build --build-arg ENV_FILE=.env -t dartw/virtus-backend:${{ github.sha }} .

      # 6️⃣ Tag image as dev
      - name: Tag image
        run: docker tag dartw/virtus-backend:${{ github.sha }} dartw/virtus-backend:stage

      # 7️⃣ Push Docker images
      - name: Push Docker images
        run: docker push dartw/virtus-backend:${{ github.sha }} && docker push dartw/virtus-backend:stage

      - name: Cleanup .env
        run: rm -f .env

  deploy:
    name: Deploy to Fly.io (Stage)
    runs-on: ubuntu-latest
    environment: stage
    needs: build-and-push-image

    steps:
      # 1️⃣ Checkout and set up
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Install Flyctl and auth
      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: latest

      # 3️⃣ set secrets and deploy
      - name: Set Fly secrets and Deploy to Stage
        run: |
          flyctl secrets set \
            DATABASE_URL="${{ secrets.DATABASE_URL_STAGE_PG_FLY_SSLDISABLE }}" \
            REDIS_URL="${{ secrets.REDIS_URL }}" \
            REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
            BUN_ENV=stage \
            BASE_URL=https://app-wild-dust-1031.fly.dev \
            CACHE_TTL=3600 \
            RATE_LIMIT_MAX=100 \
            RATE_LIMIT_WINDOW=60 \
            --app app-wild-dust-1031

            flyctl deploy --app app-wild-dust-1031 --image dartw/virtus-backend:stage --remote-only --wait-timeout=300s

            curl -v https://app-wild-dust-1031.fly.dev/
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN_VIRTUS_BACKEND }}
