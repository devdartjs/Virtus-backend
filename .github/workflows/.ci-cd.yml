name: CI - Initial

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build & Unit Tests
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Cache Bun runtime
      - name: Cache Bun
        uses: actions/cache@v3
        with:
          path: ~/.bun
          key: bun-${{ runner.os }}-${{ hashFiles('bun.lockb') }}

      # 3️⃣ Install Bun
      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | BUN_INSTALL_VERSION=1.9.0 bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      # 4️⃣ Install dependencies
      - name: Install dependencies
        run: bun install

      # 5️⃣ Build the app
      - name: Build app
        run: bun build src/server.ts --outdir dist --target bun

      # 6️⃣ Check code format
      - name: Check code format
        run: bunx prettier --write "src/**/*.ts"

      # 7️⃣ Lint
      - name: Run ESLint
        run: bun run lint:fix

      # 8️⃣ Generate Prisma client
      - name: Generate Prisma client
        run: bunx prisma generate

      # 9️⃣ Run unit tests with coverage
      - name: Run unit tests with coverage
        run: bunx vitest run --coverage

  build-and-push-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Cache Bun runtime
      - name: Cache Bun
        uses: actions/cache@v3
        with:
          path: ~/.bun
          key: bun-${{ runner.os }}-${{ hashFiles('bun.lockb') }}

      # 3️⃣ Install Bun
      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | BUN_INSTALL_VERSION=1.9.0 bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      # 4️⃣ Login to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5️⃣ Build Docker image
      - name: Build Docker image
        run: docker build -t dartw/virtus-backend:${{ github.sha }} .

      # 6️⃣ Tag image as dev
      - name: Tag image
        run: docker tag dartw/virtus-backend:${{ github.sha }} dartw/virtus-backend:dev

      # 7️⃣ Push Docker images
      - name: Push Docker images
        run: docker push dartw/virtus-backend:${{ github.sha }} && docker push dartw/virtus-backend:dev

  deploy-stage:
    name: Deploy Stage & Run Post-Deploy Unit Tests
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Login to Fly.io
      - name: Fly.io Login
        run: fly auth login --access-token ${{ secrets.FLY_API_TOKEN_VIRTUS_BACKEND }}

      # 3️⃣ Deploy image to Fly.io Stage
      - name: Deploy image to Fly.io Stage
        run: fly deploy --image dartw/virtus-backend:${{ github.sha }} --app virtus-backend-stage --remote-only

      # 4️⃣ Run unit tests on Stage
      - name: Run unit tests on Stage
        run: bunx vitest run --coverage
