services:
  db:
    image: postgres:17
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_USER: dart
      POSTGRES_PASSWORD: nghk98734
      POSTGRES_DB: postgresdb
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dart -d postgresdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    profiles:
      - test
      - test-stage
      - db
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "0.5"
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - app-network
    profiles:
      - dev
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: "0.25"
  app:
    build: .
    restart: always
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${PORT}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - dev
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "0.5"
  app1:
    build: .
    restart: always
    ports:
      - "3001:3000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${PORT}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - stage
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "0.5"
  app2:
    build: .
    restart: always
    ports:
      - "3002:3000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${PORT}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - stage
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "0.5"
  app3:
    build: .
    restart: always
    ports:
      - "3003:3000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${PORT}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - stage
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "0.5"
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
      - app3
    networks:
      - app-network
    profiles:
      - stage
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: "0.25"
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    profiles:
      - stage
      - test
      - test-stage
      - snyk
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: "0.25"
  app4:
    build: .
    restart: always
    ports:
      - "3004:3000"
    environment:
      BUN_ENV: development
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${PORT}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    profiles:
      - test
      - snyk
    env_file:
      - .env.development
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "0.5"
  snyk:
    image: snyk/snyk-cli:docker
    container_name: snyk
    command: sh
    environment:
      SNYK_TOKEN: ${SNYK_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/app
    depends_on:
      - app4
    profiles:
      - snyk
    networks:
      - app-network
    stdin_open: true
    tty: true
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: "0.25"
  app4-stage:
    build:
      context: .
      dockerfile: Dockerfile.stage
    restart: always
    ports:
      - "3001:3000"
    environment:
      BUN_ENV: test
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${PORT}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    profiles:
      - test-stage
    env_file:
      - .env.test
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "0.5"

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
# <name> = dev, stage or test
#docker-compose --profile <name> up --build -d

